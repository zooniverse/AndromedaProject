// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require, exports, module) {
    var $, API, Favorite, Spine, Subject, User, remove;
    Spine = require('Spine');
    $ = require('jQuery');
    API = require('zooniverse/API');
    remove = require('zooniverse/util').remove;
    Subject = require('zooniverse/models/Subject');
    User = require('zooniverse/models/User');
    Favorite = (function(_super) {

      __extends(Favorite, _super);

      Favorite.extend(Spine.Events);

      Favorite.include(Spine.Events);

      Favorite.className = 'Favorite';

      Favorite.instances = [];

      Favorite.fromJSON = function(raw) {
        var subject;
        return new this({
          id: raw.id,
          createdAt: raw.created_at,
          projectID: raw.project_id,
          subjects: (function() {
            var _i, _len, _ref, _results;
            _ref = raw.subjects;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              subject = _ref[_i];
              _results.push(Subject.fromJSON(subject));
            }
            return _results;
          })()
        });
      };

      Favorite.refresh = function(_arg) {
        var fetch, page,
          _this = this;
        page = (_arg != null ? _arg : {
          page: 1
        }).page;
        if (!(page > 1)) {
          while (this.instances.length > 0) {
            this.instances[0].destroy();
          }
        }
        if (User.current == null) {
          return;
        }
        fetch = API["fetch" + this.className + "s"]({
          project: User.project,
          user: User.current
        }, {
          page: page
        });
        return fetch.done(function(response) {
          var instance, raw, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = response.length; _i < _len; _i++) {
            raw = response[_i];
            instance = _this.fromJSON(raw);
            _results.push(instance.projectID = User.project.id || User.project);
          }
          return _results;
        });
      };

      Favorite.prototype.id = '';

      Favorite.prototype.createdAt = null;

      Favorite.prototype.projectID = 'NO_PROJECT_ID';

      Favorite.prototype.subjects = null;

      function Favorite(params) {
        var addMap, property, value, _ref, _ref1, _ref2;
        if (params == null) {
          params = {};
        }
        this.destroy = __bind(this.destroy, this);

        this.persist = __bind(this.persist, this);

        this.toJSON = __bind(this.toJSON, this);

        for (property in params) {
          if (!__hasProp.call(params, property)) continue;
          value = params[property];
          this[property] = value;
        }
        if ((_ref = this.createdAt) == null) {
          this.createdAt = new Date;
        }
        if ((_ref1 = this.subjects) == null) {
          this.subjects = [];
        }
        this.constructor.instances.push(this);
        addMap = {};
        addMap[this.constructor.className.toLowerCase()] = this;
        if ((_ref2 = User.current) != null) {
          _ref2.add(addMap);
        }
      }

      Favorite.prototype.toJSON = function() {
        var subject;
        return {
          favorite: {
            subject_ids: (function() {
              var _i, _len, _ref, _results;
              _ref = this.subjects;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                subject = _ref[_i];
                _results.push(subject.id);
              }
              return _results;
            }).call(this)
          }
        };
      };

      Favorite.prototype.persist = function() {
        var post,
          _this = this;
        this.trigger('persisting');
        post = API.createFavorite({
          project: this.projectID,
          subjects: this.subjects
        });
        post.done(function(response) {
          _this.id = response.id;
          return _this.trigger('persist');
        });
        return post.fail(function(response) {
          return _this.trigger('error', response);
        });
      };

      Favorite.prototype.destroy = function(fromServer) {
        var removeMap, _ref;
        remove(this, {
          from: this.constructor.instances
        });
        removeMap = {};
        removeMap[this.constructor.className.toLowerCase()] = this;
        if ((_ref = User.current) != null) {
          _ref.remove(removeMap);
        }
        if (fromServer === true) {
          return API["destroy" + this.constructor.className]($.extend({
            project: this.projectID
          }, removeMap));
        }
      };

      return Favorite;

    })(Spine.Module);
    return module.exports = Favorite;
  });

}).call(this);
