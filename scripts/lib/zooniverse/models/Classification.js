// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require, exports, module) {
    var $, API, Annotation, Classification, Spine, config, joinLines;
    Spine = require('Spine');
    $ = require('jQuery');
    API = require('zooniverse/API');
    config = require('zooniverse/config');
    joinLines = require('zooniverse/util').joinLines;
    Annotation = require('./Annotation');
    Classification = (function(_super) {

      __extends(Classification, _super);

      Classification.configure('Classification', 'workflow', 'subjects', 'annotations');

      function Classification() {
        this.destroy = __bind(this.destroy, this);

        this.toJSON = __bind(this.toJSON, this);

        this.persist = __bind(this.persist, this);

        var _ref;
        Classification.__super__.constructor.apply(this, arguments);
        if (this.subjects == null) {
          throw new Error('Classification created without subjects');
        }
        if ((_ref = this.annotations) == null) {
          this.annotations = [];
        }
        new Annotation({
          classification: this,
          value: {
            clientCreated: (new Date).toUTCString()
          }
        });
        new Annotation({
          classification: this,
          value: {
            userAgent: navigator.userAgent
          }
        });
      }

      Classification.prototype.persist = function() {
        var request, url,
          _this = this;
        this.trigger('persisting');
        url = joinLines("/projects/" + this.workflow.project.id + "\n/workflows/" + this.workflow.id + "\n/classifications");
        request = API.post(url, this.toJSON());
        request.done(function() {
          return _this.trigger('persist', _this);
        });
        request.fail(function() {
          return _this.trigger('error', _this);
        });
        return request;
      };

      Classification.prototype.toJSON = function() {
        var annotation, subject;
        return {
          classification: {
            subject_ids: (function() {
              var _i, _len, _ref, _results;
              _ref = this.subjects;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                subject = _ref[_i];
                _results.push(subject.id);
              }
              return _results;
            }).call(this),
            annotations: (function() {
              var _i, _len, _ref, _results;
              _ref = this.annotations;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                annotation = _ref[_i];
                _results.push(annotation.toJSON());
              }
              return _results;
            }).call(this)
          }
        };
      };

      Classification.prototype.destroy = function() {
        var annotation, annotations, _i, _len;
        annotations = (function() {
          var _i, _len, _ref, _results;
          _ref = this.annotations;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            annotation = _ref[_i];
            _results.push(annotation);
          }
          return _results;
        }).call(this);
        for (_i = 0, _len = annotations.length; _i < _len; _i++) {
          annotation = annotations[_i];
          annotation.destroy();
        }
        return Classification.__super__.destroy.apply(this, arguments);
      };

      return Classification;

    })(Spine.Model);
    return module.exports = Classification;
  });

}).call(this);
