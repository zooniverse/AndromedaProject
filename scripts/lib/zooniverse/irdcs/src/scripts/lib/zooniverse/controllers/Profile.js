// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require, exports, module) {
    var LoginForm, Profile, Spine, TEMPLATE, User;
    Spine = require('Spine');
    User = require('zooniverse/models/User');
    LoginForm = require('zooniverse/controllers/LoginForm');
    TEMPLATE = require('zooniverse/views/Profile');
    Profile = (function(_super) {

      __extends(Profile, _super);

      Profile.prototype.className = 'zooniverse-profile';

      Profile.prototype.template = TEMPLATE;

      Profile.prototype.events = {
        'click .sign-out': 'signOut'
      };

      Profile.prototype.elements = {
        '.username': 'usernameContainer',
        '.login-form': 'loginFormContainer',
        '.favorites ul': 'favoritesList',
        '.recents ul': 'recentsList',
        '.groups ul': 'groupsList'
      };

      function Profile() {
        this.signOut = __bind(this.signOut, this);

        this.updateRecents = __bind(this.updateRecents, this);

        this.recentTemplate = __bind(this.recentTemplate, this);

        this.updateFavorites = __bind(this.updateFavorites, this);

        this.favoriteTemplate = __bind(this.favoriteTemplate, this);

        this.userChanged = __bind(this.userChanged, this);
        Profile.__super__.constructor.apply(this, arguments);
        this.html(this.template);
        this.loginForm = new LoginForm({
          el: this.loginFormContainer
        });
        User.bind('sign-in', this.userChanged);
        User.bind('change', this.userChanged);
      }

      Profile.prototype.userChanged = function() {
        this.el.toggleClass('signed-in', User.current != null);
        if (User.current != null) {
          this.usernameContainer.html(User.current.name);
          this.updateFavorites();
          return this.updateRecents();
        }
      };

      Profile.prototype.favoriteTemplate = function(favorite) {
        return "<li>" + favorite.createdAt + "</li>";
      };

      Profile.prototype.updateFavorites = function() {
        var favorite, favorites, _i, _len, _results;
        this.favoritesList.empty();
        favorites = User.current.favorites;
        this.el.toggleClass('has-favorites', favorites.length > 0);
        _results = [];
        for (_i = 0, _len = favorites.length; _i < _len; _i++) {
          favorite = favorites[_i];
          _results.push(this.favoritesList.prepend(this.favoriteTemplate(favorite)));
        }
        return _results;
      };

      Profile.prototype.recentTemplate = function(recent) {
        return "<li>" + recent.subjects[0].location + "</li>";
      };

      Profile.prototype.updateRecents = function() {
        var recent, recents, _i, _len, _results;
        this.recentsList.empty();
        recents = User.current.recents;
        this.el.toggleClass('has-recents', recents.length > 0);
        _results = [];
        for (_i = 0, _len = recents.length; _i < _len; _i++) {
          recent = recents[_i];
          _results.push(this.recentsList.prepend(this.recentTemplate(recent)));
        }
        return _results;
      };

      Profile.prototype.signOut = function(e) {
        e.preventDefault();
        return User.signOut();
      };

      return Profile;

    })(Spine.Controller);
    return module.exports = Profile;
  });

}).call(this);
