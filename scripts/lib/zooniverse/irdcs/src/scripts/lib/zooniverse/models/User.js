// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(function(require, exports, module) {
    var $, Authentication, Favorite, Recent, Spine, User, base64, config, delay, remove, _ref;
    Spine = require('Spine');
    $ = require('jQuery');
    base64 = require('base64');
    config = require('zooniverse/config');
    _ref = require('zooniverse/util'), delay = _ref.delay, remove = _ref.remove;
    Authentication = require('zooniverse/controllers/Authentication');
    Favorite = require('./Favorite');
    Recent = require('./Recent');
    User = (function(_super) {
      var _this = this;

      __extends(User, _super);

      User.configure('User', 'zooniverseId', 'name', 'apiKey', 'finishedTutorial', 'favorites', 'recents');

      User.current = null;

      User.signIn = function(user) {
        var _ref1, _ref2;
        if (user === User.current) {
          return;
        }
        User.current = user;
        User.trigger('sign-in', User.current);
        if ((_ref1 = User.current) != null) {
          _ref1.refreshFavorites();
        }
        return (_ref2 = User.current) != null ? _ref2.refreshRecents() : void 0;
      };

      User.signOut = function() {
        var _ref1;
        if ((_ref1 = User.current) != null) {
          _ref1.destroy();
        }
        return User.signIn(null);
      };

      User.fromJSON = function(raw) {
        return User.__super__.constructor.fromJSON.call(this, {
          id: raw.id,
          zooniverseId: raw.zooniverse_id,
          name: raw.name,
          apiKey: raw.api_key
        });
      };

      function User() {
        this.persist = __bind(this.persist, this);

        this.onDestroyRecent = __bind(this.onDestroyRecent, this);

        this.onCreateRecent = __bind(this.onCreateRecent, this);

        this.onDestroyFavorite = __bind(this.onDestroyFavorite, this);

        this.onCreateFavorite = __bind(this.onCreateFavorite, this);

        this.refreshRecents = __bind(this.refreshRecents, this);

        this.refreshFavorites = __bind(this.refreshFavorites, this);

        this.refreshSomething = __bind(this.refreshSomething, this);

        var tutorialFinishers, _ref1, _ref2, _ref3;
        User.__super__.constructor.apply(this, arguments);
        if ((_ref1 = this.favorites) == null) {
          this.favorites = [];
        }
        if ((_ref2 = this.recents) == null) {
          this.recents = [];
        }
        tutorialFinishers = JSON.parse(localStorage.finishedTutorial || '[]');
        this.finishedTutorial = (_ref3 = this.zooniverseId, __indexOf.call(tutorialFinishers, _ref3) >= 0);
        Favorite.bind('create', this.onCreateFavorite);
        Favorite.bind('destroy', this.onDestroyFavorite);
        Recent.bind('create', this.onCreateRecent);
        Recent.bind('destroy', this.onDestroyRecent);
      }

      User.prototype.refreshSomething = function(attribute, model) {
        var get, refresh, url,
          _this = this;
        refresh = new $.Deferred;
        url = ("" + config.apiHost + "\n/projects/" + config.app.projects[0].id + "\n/users/" + this.id + "\n/" + attribute).replace(/\n/g, '');
        get = $.getJSON(url);
        get.done(function(response) {
          var raw, _i, _len, _ref1;
          _ref1 = response.reverse();
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            raw = _ref1[_i];
            model.fromJSON(raw);
          }
          _this.trigger("refresh-" + attribute);
          return refresh.resolve(_this[attribute]);
        });
        return refresh.promise();
      };

      User.prototype.refreshFavorites = function() {
        return this.refreshSomething('favorites', Favorite);
      };

      User.prototype.refreshRecents = function() {
        return this.refreshSomething('recents', Recent);
      };

      User.prototype.onCreateFavorite = function(created) {
        this.favorites.push(created);
        return this.trigger('change');
      };

      User.prototype.onDestroyFavorite = function(destroyed) {
        remove(destroyed, {
          from: this.favorites
        });
        return this.trigger('change');
      };

      User.prototype.onCreateRecent = function(created) {
        this.recents.push(created);
        return this.trigger('change');
      };

      User.prototype.onDestroyRecent = function(destroyed) {
        remove(destroyed, {
          from: this.recents
        });
        return this.trigger('change');
      };

      User.prototype.setFinishedTutorial = function(finished) {
        var finishers, _ref1;
        this.finished = finished;
        finishers = JSON.parse(localStorage.finishedTutorial || '[]');
        if (this.finished) {
          if (_ref1 = this.zooniverseId, __indexOf.call(finishers, _ref1) < 0) {
            finishers.push(this.zooniverseId);
          }
        } else {
          remove(this.zooniverseId, {
            from: finishers
          });
        }
        return localStorage.finishedTutorial = JSON.stringify(finishers);
      };

      User.prototype.persist = function() {};

      $.ajaxSetup({
        beforeSend: function(xhr, settings) {
          var auth;
          if ((User.current != null) && !!~settings.url.indexOf(config.apiHost)) {
            auth = base64.encode("" + User.current.name + ":" + User.current.apiKey);
            return xhr.setRequestHeader('Authorization', "Basic " + auth);
          }
        }
      });

      Authentication.bind('login', function(data) {
        return User.signIn(User.fromJSON(data));
      });

      Authentication.bind('logout', function() {
        return User.signOut();
      });

      return User;

    }).call(this, Spine.Model);
    return module.exports = User;
  });

}).call(this);
