// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require, exports, module) {
    var $, Spine, Subject, Workflow, config, delay;
    Spine = require('Spine');
    $ = require('jQuery');
    config = require('zooniverse/config');
    delay = require('zooniverse/util').delay;
    Subject = require('zooniverse/models/Subject');
    Workflow = (function(_super) {

      __extends(Workflow, _super);

      Workflow.configure('Workflow', 'devID', 'queueLength', 'selectionLength', 'tutorialSubjects', 'project', 'subjects');

      Workflow.prototype.queueLength = 5;

      Workflow.prototype.selectionLength = 1;

      Workflow.prototype.selection = null;

      function Workflow() {
        this.changeSelection = __bind(this.changeSelection, this);

        this.nextSubjects = __bind(this.nextSubjects, this);

        this.fetchSubjects = __bind(this.fetchSubjects, this);

        var subject, _i, _len, _ref, _ref1, _ref2, _ref3;
        Workflow.__super__.constructor.apply(this, arguments);
        if (config.dev) {
          this.id = this.devID;
        }
        if ((_ref = this.tutorialSubjects) == null) {
          this.tutorialSubjects = [];
        }
        if ((_ref1 = this.subjects) == null) {
          this.subjects = [];
        }
        _ref2 = this.tutorialSubjects;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          subject = _ref2[_i];
          subject.workflow = this;
        }
        if ((_ref3 = this.controller) != null) {
          _ref3.workflow = this;
        }
      }

      Workflow.prototype.fetchSubjects = function(group) {
        var fetch, get, groupSegment, url,
          _this = this;
        fetch = new $.Deferred;
        groupSegment = '';
        if (group) {
          groupSegment = '/#{group}';
        }
        url = ("" + config.apiHost + "\n/projects/" + this.project.id + "\n" + groupSegment + "\n/subjects?limit=" + (this.queueLength - this.subjects.length)).replace(/\n/g, '');
        get = $.getJSON(url);
        get.done(function(response) {
          var img, raw, subject, _i, _len;
          for (_i = 0, _len = response.length; _i < _len; _i++) {
            raw = response[_i];
            if (!raw) {
              continue;
            }
            subject = Subject.fromJSON(raw);
            subject.workflow = _this;
            _this.subjects.push(subject);
            if (subject.location.standard) {
              img = $("<img src='" + subject.location.standard + "' />");
              img.css({
                height: 0,
                opacity: 0,
                position: 'absolute',
                width: 0
              });
              img.appendTo('body');
            }
          }
          return fetch.resolve(_this.subjects);
        });
        get.fail(function(response) {
          return fetch.reject(response);
        });
        return fetch.promise();
      };

      Workflow.prototype.nextSubjects = function() {
        var fetch, next,
          _this = this;
        fetch = this.fetchSubjects();
        next = new $.Deferred;
        if (this.subjects.length >= this.selectionLength) {
          this.changeSelection();
          next.resolve(this.selection);
        } else {
          fetch.done(function() {
            _this.changeSelection();
            return next.resolve(_this.selection);
          });
        }
        return next;
      };

      Workflow.prototype.changeSelection = function() {
        if (this.subjects.length < this.selectionLength) {
          alert('We\'ve run out of subjects for you to classify on this project!');
          throw new Error('No more subjects');
        }
        this.selection = this.subjects.splice(0, this.selectionLength);
        return this.trigger('change-selection');
      };

      return Workflow;

    })(Spine.Model);
    return module.exports = Workflow;
  });

}).call(this);
