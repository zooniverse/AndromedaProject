// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require, exports, module) {
    var App, Pager, Project, Spine, TopBar;
    Spine = require('Spine');
    Project = require('zooniverse/models/Project');
    TopBar = require('zooniverse/controllers/TopBar');
    Pager = require('zooniverse/controllers/Pager');
    App = (function(_super) {

      __extends(App, _super);

      App.prototype.app = null;

      App.prototype.languages = null;

      function App() {
        this.initPagers = __bind(this.initPagers, this);

        this.initTopBar = __bind(this.initTopBar, this);
        App.__super__.constructor.apply(this, arguments);
        this.initTopBar();
        this.initPagers();
      }

      App.prototype.initTopBar = function() {
        this.topBar = new TopBar({
          languages: this.languages
        });
        return this.topBar.el.appendTo('body');
      };

      App.prototype.initPagers = function() {
        var pageContainer, _i, _len, _ref, _results;
        _ref = this.el.find('[data-page]').parent();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pageContainer = _ref[_i];
          _results.push(new Pager({
            el: pageContainer
          }));
        }
        return _results;
      };

      return App;

    })(Spine.Controller);
    return module.exports = App;
  });

}).call(this);
