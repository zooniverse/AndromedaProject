// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require, exports, module) {
    var $, Authentication, Spine, config, delay;
    Spine = require('Spine');
    $ = require('jQuery');
    delay = require('zooniverse/util').delay;
    config = require('zooniverse/config');
    Authentication = (function(_super) {
      var _this = this;

      __extends(Authentication, _super);

      function Authentication() {
        return Authentication.__super__.constructor.apply(this, arguments);
      }

      Authentication.extend(Spine.Events);

      Authentication.iframe = $("<iframe src='" + config.authHost + config.authPath + "'></iframe>");

      Authentication.iframe.css({
        display: 'none'
      });

      Authentication.iframe.appendTo('body');

      Authentication.external = Authentication.iframe.get(0).contentWindow;

      Authentication.post = function(message) {
        message = JSON.stringify(message);
        return Authentication.external.postMessage(message, config.authHost);
      };

      Authentication.logIn = function(username, password) {
        return Authentication.post({
          login: {
            username: username,
            password: password
          }
        });
      };

      Authentication.logOut = function() {
        return Authentication.post({
          logout: {}
        });
      };

      Authentication.checkCurrent = function() {
        return Authentication.post({
          current_user: {}
        });
      };

      $(window).on('message', function(_arg) {
        var data, e;
        e = _arg.originalEvent;
        if (e.data === 'READY') {
          Authentication.checkCurrent();
          return;
        }
        data = JSON.parse(e.data);
        if (data.response.success === true) {
          return Authentication.trigger(data.command, data.response);
        } else {
          if (data.command !== 'current_user') {
            return Authentication.trigger('error', data.response.message);
          }
        }
      });

      return Authentication;

    }).call(this, Spine.Module);
    return module.exports = Authentication;
  });

}).call(this);
