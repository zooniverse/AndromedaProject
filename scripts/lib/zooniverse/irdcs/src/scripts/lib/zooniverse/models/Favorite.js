// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require, exports, module) {
    var $, Favorite, Spine, Subject, config;
    Spine = require('Spine');
    $ = require('jQuery');
    config = require('zooniverse/config');
    Subject = require('./Subject');
    Favorite = (function(_super) {

      __extends(Favorite, _super);

      Favorite.configure('Favorite', 'createdAt', 'subjects');

      Favorite.fromJSON = function(raw) {
        var subject, _i, _len, _ref;
        _ref = raw.subjects;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          subject = _ref[_i];
          subject.workflow_ids = [raw.workflow_id];
        }
        return this.create({
          createdAt: raw.created_at,
          subjects: (function() {
            var _j, _len1, _ref1, _results;
            _ref1 = raw.subjects;
            _results = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              subject = _ref1[_j];
              _results.push(Subject.fromJSON(subject));
            }
            return _results;
          })()
        });
      };

      function Favorite() {
        this.persist = __bind(this.persist, this);

        this.toJSON = __bind(this.toJSON, this);

        var _ref;
        Favorite.__super__.constructor.apply(this, arguments);
        if ((_ref = this.createdAt) == null) {
          this.createdAt = new Date;
        }
      }

      Favorite.prototype.toJSON = function() {
        var subject;
        return {
          favorite: {
            subject_ids: (function() {
              var _i, _len, _ref, _results;
              _ref = this.subjects;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                subject = _ref[_i];
                _results.push(subject.id);
              }
              return _results;
            }).call(this)
          }
        };
      };

      Favorite.prototype.persist = function() {
        var post, url,
          _this = this;
        this.trigger('persisting');
        url = "" + config.apiHost + "/projects/" + config.app.projects[0].id + "/favorites";
        post = $.post(url, this.toJSON());
        post.done(function() {
          return _this.trigger('persist');
        });
        return post.fail(function() {
          return _this.trigger('error');
        });
      };

      return Favorite;

    })(Spine.Model);
    return module.exports = Favorite;
  });

}).call(this);
