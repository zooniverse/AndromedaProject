// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require, exports, module) {
    var $, Classification, Classifier, Dialog, Favorite, Recent, Spine, Tutorial, User, delay;
    Spine = require('Spine');
    $ = require('jQuery');
    User = require('zooniverse/models/User');
    Classification = require('zooniverse/models/Classification');
    Favorite = require('zooniverse/models/Favorite');
    Recent = require('zooniverse/models/Recent');
    delay = require('zooniverse/util').delay;
    Tutorial = require('zooniverse/controllers/Tutorial');
    Dialog = require('zooniverse/controllers/Dialog');
    Classifier = (function(_super) {

      __extends(Classifier, _super);

      Classifier.prototype.tutorialSteps = null;

      Classifier.prototype.template = null;

      Classifier.prototype.workflow = null;

      Classifier.prototype.tutorial = null;

      Classifier.prototype.classification = null;

      Classifier.prototype.events = {};

      Classifier.prototype.elements = {};

      function Classifier() {
        this.nextSubjects = __bind(this.nextSubjects, this);

        this.goToTalk = __bind(this.goToTalk, this);

        this.addFavorite = __bind(this.addFavorite, this);

        this.saveClassification = __bind(this.saveClassification, this);

        this.startTutorial = __bind(this.startTutorial, this);

        this.render = __bind(this.render, this);

        this.reset = __bind(this.reset, this);

        var _this = this;
        Classifier.__super__.constructor.apply(this, arguments);
        if (typeof this.template === 'string') {
          this.html(this.template);
        }
        if (typeof this.template === 'function') {
          this.html(this.template(this));
        }
        delay(function() {
          var _ref, _ref1;
          _this.workflow.bind('change-selection', _this.reset);
          if (((_ref = _this.workflow.tutorialSubjects) != null ? _ref.length : void 0) > 0 && ((_ref1 = _this.tutorialSteps) != null ? _ref1.length : void 0) > 0) {
            _this.tutorial = new Tutorial({
              target: _this.el,
              steps: _this.tutorialSteps
            });
          }
          if (_this.tutorial) {
            return _this.startTutorial();
          } else {
            return _this.nextSubjects();
          }
        });
        User.bind('sign-in', function() {
          if (User.current != null) {
            if (_this.tutorial != null) {
              if (User.current.finishedTutorial) {
                _this.tutorial.end();
                return _this.nextSubjects();
              } else {
                return _this.startTutorial();
              }
            } else {
              return _this.nextSubjects();
            }
          } else {
            return _this.startTutorial();
          }
        });
      }

      Classifier.prototype.reset = function() {
        var _ref,
          _this = this;
        if ((_ref = this.classification) != null) {
          _ref.destroy();
        }
        this.classification = new Classification({
          workflow: this.workflow,
          subjects: this.workflow.selection
        });
        this.classification.bind('change', this.render);
        return delay(function() {
          return _this.classification.trigger('change');
        });
      };

      Classifier.prototype.render = function() {};

      Classifier.prototype.startTutorial = function(e) {
        var subject, _i, _len, _ref;
        if (e != null) {
          if (typeof e.preventDefault === "function") {
            e.preventDefault();
          }
        }
        _ref = this.workflow.tutorialSubjects;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          subject = _ref[_i];
          this.workflow.subjects.unshift(subject);
        }
        return this.nextSubjects().done(this.tutorial.start);
      };

      Classifier.prototype.saveClassification = function() {
        this.classification.persist();
        return Recent.create({
          subjects: this.workflow.selection
        });
      };

      Classifier.prototype.addFavorite = function() {
        var favorite;
        favorite = Favorite.create({
          subjects: this.workflow.selection
        });
        return favorite.persist();
      };

      Classifier.prototype.goToTalk = function() {
        if (this.workflow.selection[0].eql(this.workflow.tutorialSubjects[0])) {
          return new Dialog({
            content: 'Tutorial subjects are not available in Talk at this time.',
            className: 'classifier',
            target: this.el
          });
        } else {
          return open(this.workflow.selection[0].talkHref());
        }
      };

      Classifier.prototype.nextSubjects = function() {
        return this.workflow.nextSubjects();
      };

      return Classifier;

    })(Spine.Controller);
    return module.exports = Classifier;
  });

}).call(this);
