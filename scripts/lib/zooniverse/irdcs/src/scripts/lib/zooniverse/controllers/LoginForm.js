// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require, exports, module) {
    var Authentication, LoginForm, Spine, TEMPLATE, User;
    Spine = require('Spine');
    Authentication = require('zooniverse/controllers/Authentication');
    User = require('zooniverse/models/User');
    TEMPLATE = require('zooniverse/views/LoginForm');
    LoginForm = (function(_super) {

      __extends(LoginForm, _super);

      LoginForm.prototype.className = 'zooniverse-login-form';

      LoginForm.prototype.template = TEMPLATE;

      LoginForm.prototype.events = {
        'submit .sign-in form': 'onSubmit',
        'click .sign-out button': 'signOut'
      };

      LoginForm.prototype.elements = {
        '.errors': 'errors',
        '.sign-in input[name="username"]': 'usernameField',
        '.sign-in input[name="password"]': 'passwordField',
        '.sign-out .current': 'currentDisplay'
      };

      function LoginForm() {
        this.signOut = __bind(this.signOut, this);

        this.onSignIn = __bind(this.onSignIn, this);

        this.onError = __bind(this.onError, this);

        this.onSubmit = __bind(this.onSubmit, this);
        LoginForm.__super__.constructor.apply(this, arguments);
        this.html(this.template);
        User.bind('sign-in', this.onSignIn);
        Authentication.bind('error', this.onError);
      }

      LoginForm.prototype.onSubmit = function(e) {
        this.el.removeClass('has-error');
        this.el.addClass('waiting');
        this.errors.empty();
        Authentication.logIn(this.usernameField.val(), this.passwordField.val());
        return e.preventDefault();
      };

      LoginForm.prototype.onError = function(error) {
        if (error == null) {
          return;
        }
        this.el.removeClass('signed-in');
        this.el.removeClass('waiting');
        this.el.addClass('has-error');
        return this.errors.html("<div>" + error + "</div>");
      };

      LoginForm.prototype.onSignIn = function() {
        var _ref;
        this.el.toggleClass('signed-in', User.current != null);
        this.el.removeClass('waiting', User.current != null);
        this.usernameField.add(this.passwordField).val('');
        return this.currentDisplay.html(((_ref = User.current) != null ? _ref.name : void 0) || '');
      };

      LoginForm.prototype.signOut = function() {
        return Authentication.logOut();
      };

      return LoginForm;

    })(Spine.Controller);
    return module.exports = LoginForm;
  });

}).call(this);
