// Generated by CoffeeScript 1.3.3
(function() {
  var __slice = [].slice;

  define(function(require, exports, module) {
    var $, applyFromCache, attribute, currentLang, el, elementsMap, getObject, languagesCache, path, target, translate, translateDocument, translationsRoot, tree, _i, _len, _ref;
    $ = require('jQuery');
    getObject = require('zooniverse/util').getObject;
    attribute = 'data-i18n';
    translationsRoot = 'translations';
    elementsMap = {};
    languagesCache = {};
    currentLang = '';
    _ref = $("[" + attribute + "]");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      target = _ref[_i];
      target = $(target);
      if (target.find("[" + attribute + "]").length !== 0) {
        continue;
      }
      tree = target.parents("[" + attribute + "]").andSelf();
      path = ((function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = tree.length; _j < _len1; _j++) {
          el = tree[_j];
          _results.push($(el).attr(attribute));
        }
        return _results;
      })()).join('.');
      elementsMap[path] = target;
    }
    applyFromCache = function(lang) {
      var content, _results;
      $('html').attr('lang', lang);
      _results = [];
      for (path in elementsMap) {
        target = elementsMap[path];
        content = getObject(path, languagesCache[lang]);
        if (content != null) {
          _results.push(target.html(content));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    translateDocument = function() {
      var e, lang, _j;
      e = 2 <= arguments.length ? __slice.call(arguments, 0, _j = arguments.length - 1) : (_j = 0, []), lang = arguments[_j++];
      currentLang = lang;
      if (lang in languagesCache) {
        return applyFromCache(lang);
      } else {
        return $.get("" + translationsRoot + "/" + lang + ".json", function(response) {
          languagesCache[lang] = response;
          return applyFromCache(lang);
        });
      }
    };
    translate = function(string) {
      console.log(languagesCache[currentLang]);
      if (!currentLang) {
        throw new Error('No language selected');
      }
      return getObject(string, languagesCache[currentLang]);
    };
    $(document).on('request-translation', translateDocument);
    return module.exports = {
      translateDocument: translateDocument,
      translate: translate,
      elementsMap: elementsMap,
      languagesCache: languagesCache
    };
  });

}).call(this);
