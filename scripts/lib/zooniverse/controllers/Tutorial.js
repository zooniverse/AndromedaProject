// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  define(function(require, exports, module) {
    var $, Tutorial, User, delay;
    $ = require('jQuery');
    delay = require('zooniverse/util').delay;
    User = require('zooniverse/models/User');
    Tutorial = (function() {

      Tutorial.prototype.target = null;

      Tutorial.prototype.steps = null;

      Tutorial.prototype.skipText = '&rarr;';

      Tutorial.prototype.skipTitle = 'Skip this step';

      Tutorial.prototype.exitText = '&times;';

      Tutorial.prototype.exitTitle = 'Exit tutorial';

      Tutorial.prototype.className = 'tutorial-step';

      Tutorial.prototype.controlsClass = 'controls';

      Tutorial.prototype.arrowClass = 'arrow';

      Tutorial.prototype.messageClass = 'message';

      Tutorial.prototype.continueClass = 'continue';

      Tutorial.prototype.blockerClass = 'tutorial-blocker';

      Tutorial.prototype.el = null;

      Tutorial.prototype.message = null;

      Tutorial.prototype.arrow = null;

      Tutorial.prototype.blockers = null;

      Tutorial.prototype.current = -1;

      function Tutorial(_arg) {
        var isInactive, _ref;
        this.target = _arg.target, this.steps = _arg.steps;
        this.end = __bind(this.end, this);

        this.next = __bind(this.next, this);

        this.start = __bind(this.start, this);

        this.probablyVisible = __bind(this.probablyVisible, this);

        if ((_ref = this.steps) == null) {
          this.steps = [];
        }
        this.el = $("<div class='" + this.className + "'></div>");
        this.el.css({
          display: 'none'
        });
        this.controls = $("<div class=\"" + this.controlsClass + "\">\n  <button value=\"skip\" title=\"" + this.skipTitle + "\">" + this.skipText + "</button>\n  <button value=\"end\" title=\"" + this.exitTitle + "\">" + this.exitText + "</button>\n</div>");
        this.message = $("<div class='" + this.messageClass + "'></div>");
        this.arrow = $("<div class='" + this.arrowClass + "'></div>");
        this.controls.appendTo(this.el);
        this.message.appendTo(this.el);
        this.arrow.appendTo(this.el);
        this.controls.on('click', '[value="skip"]', this.next);
        this.controls.on('click', '[value="end"]', this.end);
        this.el.appendTo($(this.target || 'body'));
        isInactive = function(i, element) {
          element = $(element);
          return !element.hasClass('active');
        };
      }

      Tutorial.prototype.probablyVisible = function() {
        var el, inactiveParentPages, parentPages;
        parentPages = this.target.parents('[data-page]');
        inactiveParentPages = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = parentPages.length; _i < _len; _i++) {
            el = parentPages[_i];
            if (!$(el).hasClass('active')) {
              _results.push(el);
            }
          }
          return _results;
        })();
        return inactiveParentPages.length === 0 && this.current < this.steps.length;
      };

      Tutorial.prototype.start = function() {
        var _ref;
        if ((_ref = this.steps[this.current]) != null) {
          _ref.leave();
        }
        this.el.css({
          display: ''
        });
        this.current = -1;
        return this.next();
      };

      Tutorial.prototype.next = function(e) {
        var _ref;
        if ((_ref = this.steps[this.current]) != null) {
          _ref.leave();
        }
        this.current += 1;
        if (this.steps[this.current]) {
          return this.steps[this.current].enter(this);
        } else {
          return this.end();
        }
      };

      Tutorial.prototype.end = function() {
        var _ref;
        if ((_ref = this.steps[this.current]) != null) {
          _ref.leave();
        }
        this.current = this.steps.length;
        return this.el.css({
          display: 'none'
        });
      };

      return Tutorial;

    })();
    Tutorial.Step = (function() {

      Step.prototype.heading = '';

      Step.prototype.content = '';

      Step.prototype.style = null;

      Step.prototype.attach = null;

      Step.prototype.block = '';

      Step.prototype.nextOn = null;

      Step.prototype.continueText = 'Continue';

      Step.prototype.className = '';

      Step.prototype.arrowClass = '';

      Step.prototype.delay = 0;

      Step.prototype.tutorial = null;

      function Step(params) {
        var line, property, value, _base, _base1, _base2, _base3, _base4, _base5, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
        if (params == null) {
          params = {};
        }
        this.onLeave = __bind(this.onLeave, this);

        this.leave = __bind(this.leave, this);

        this.createBlockers = __bind(this.createBlockers, this);

        this.onEnter = __bind(this.onEnter, this);

        this.enter = __bind(this.enter, this);

        for (property in params) {
          if (!__hasProp.call(params, property)) continue;
          value = params[property];
          this[property] = value;
        }
        if (typeof this.content === 'string') {
          this.content = [this.content];
        }
        if (this.content instanceof Array) {
          this.content = $(((function() {
            var _i, _len, _ref, _results;
            _ref = this.content;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              line = _ref[_i];
              _results.push("<p>" + line + "</p>");
            }
            return _results;
          }).call(this)).join(''));
        }
        if (this.heading) {
          this.content = $("<p class='heading'>" + this.heading + "</p>").add(this.content);
        }
        if ((_ref = this.attach) == null) {
          this.attach = {};
        }
        if ((_ref1 = (_base = this.attach).x) == null) {
          _base.x = 'center';
        }
        if ((_ref2 = (_base1 = this.attach).y) == null) {
          _base1.y = 'middle';
        }
        if ((_ref3 = (_base2 = this.attach).to) == null) {
          _base2.to = '';
        }
        if ((_ref4 = (_base3 = this.attach).at) == null) {
          _base3.at = {};
        }
        if ((_ref5 = (_base4 = this.attach.at).x) == null) {
          _base4.x = 'center';
        }
        if ((_ref6 = (_base5 = this.attach.at).y) == null) {
          _base5.y = 'middle';
        }
      }

      Step.prototype.enter = function(tutorial) {
        var buttonsHolder, eventName, selector, _ref,
          _this = this;
        this.tutorial = tutorial;
        this.onEnter.call(this, this.tutorial);
        this.tutorial.message.html(this.content);
        if (this.nextOn != null) {
          _ref = this.nextOn;
          for (eventName in _ref) {
            selector = _ref[eventName];
            $(document).on(eventName, selector, this.tutorial.next);
          }
        } else {
          buttonsHolder = $("<div class='" + this.tutorial.continueClass + "'><button>" + this.continueText + "</button></div>");
          this.tutorial.message.append(buttonsHolder);
          this.tutorial.el.on('click', "." + this.tutorial.continueClass + " button", this.tutorial.next);
        }
        if (this.style) {
          this.tutorial.el.css(this.style);
        }
        if (this.arrowClass) {
          this.tutorial.arrow.addClass(this.arrowClass);
        }
        delay(this.delay, function() {
          _this.moveMessage();
          return _this.createBlockers();
        });
        if (this.className) {
          return this.tutorial.el.addClass(this.className);
        }
      };

      Step.prototype.onEnter = function() {};

      Step.prototype.moveMessage = function() {
        var stepOffset, stepSize, target, targetOffset, targetSize, xStrings, yStrings;
        xStrings = {
          left: 0,
          center: 0.5,
          right: 1
        };
        yStrings = {
          top: 0,
          middle: 0.5,
          bottom: 1
        };
        if (this.attach.x in xStrings) {
          this.attach.x = xStrings[this.attach.x];
        }
        if (this.attach.y in yStrings) {
          this.attach.y = yStrings[this.attach.y];
        }
        if (this.attach.at.x in xStrings) {
          this.attach.at.x = xStrings[this.attach.at.x];
        }
        if (this.attach.at.y in yStrings) {
          this.attach.at.y = yStrings[this.attach.at.y];
        }
        target = $(this.attach.to).first();
        targetSize = {
          width: target.outerWidth(),
          height: target.outerHeight()
        };
        targetOffset = target.offset();
        stepSize = {
          width: this.tutorial.el.outerWidth(),
          height: this.tutorial.el.outerHeight()
        };
        stepOffset = {
          left: targetOffset.left - (stepSize.width * this.attach.x) + (targetSize.width * this.attach.at.x),
          top: targetOffset.top - (stepSize.height * this.attach.y) + (targetSize.height * this.attach.at.y)
        };
        this.tutorial.el.css({
          position: 'absolute'
        });
        return this.tutorial.el.offset(stepOffset);
      };

      Step.prototype.createBlockers = function() {
        var blocker, element, _i, _len, _ref, _results;
        this.tutorial.blockers = $();
        _ref = $(this.block);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          element = $(element);
          blocker = $("<div class='" + this.tutorial.blockerClass + "'></div>");
          blocker.insertAfter(this.tutorial.el);
          this.tutorial.blockers = this.tutorial.blockers.add(blocker);
          blocker.css({
            position: 'absolute'
          });
          blocker.width(element.outerWidth());
          blocker.height(element.outerHeight());
          _results.push(blocker.offset(element.offset()));
        }
        return _results;
      };

      Step.prototype.leave = function() {
        var eventName, selector, _ref;
        this.onLeave.call(this, this.tutorial);
        this.tutorial.message.html('');
        if (this.nextOn != null) {
          _ref = this.nextOn;
          for (eventName in _ref) {
            selector = _ref[eventName];
            $(document).off(eventName, selector, this.tutorial.next);
          }
        } else {
          this.tutorial.el.off('click', "." + this.tutorial.continueClass + " button", this.tutorial.next);
        }
        if (this.arrowClass) {
          this.tutorial.arrow.removeClass(this.arrowClass);
        }
        if (this.className) {
          this.tutorial.el.removeClass(this.className);
        }
        return this.tutorial.blockers.remove().empty();
      };

      Step.prototype.onLeave = function() {};

      return Step;

    })();
    return module.exports = Tutorial;
  });

}).call(this);
