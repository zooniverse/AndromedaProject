// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require, exports, module) {
    var $, Classification, Classifier, Dialog, Favorite, LoginForm, Recent, Spine, Tutorial, User, arraysMatch, delay, _ref;
    Spine = require('Spine');
    $ = require('jQuery');
    _ref = require('zooniverse/util'), delay = _ref.delay, arraysMatch = _ref.arraysMatch;
    User = require('zooniverse/models/User');
    Classification = require('zooniverse/models/Classification');
    Favorite = require('zooniverse/models/Favorite');
    Recent = require('zooniverse/models/Recent');
    Tutorial = require('zooniverse/controllers/Tutorial');
    Dialog = require('zooniverse/controllers/Dialog');
    LoginForm = require('zooniverse/controllers/LoginForm');
    Classifier = (function(_super) {

      __extends(Classifier, _super);

      Classifier.prototype.tutorialSteps = null;

      Classifier.prototype.template = null;

      Classifier.prototype.workflow = null;

      Classifier.prototype.tutorial = null;

      Classifier.prototype.classification = null;

      Classifier.prototype.events = {};

      Classifier.prototype.elements = {};

      Classifier.prototype.classificationsThisSession = 0;

      function Classifier() {
        this.noMoreSubjects = __bind(this.noMoreSubjects, this);

        this.nextSubjects = __bind(this.nextSubjects, this);

        this.goToTalk = __bind(this.goToTalk, this);

        this.destroyFavorite = __bind(this.destroyFavorite, this);

        this.createFavorite = __bind(this.createFavorite, this);

        this.saveClassification = __bind(this.saveClassification, this);

        this.tutorialSelected = __bind(this.tutorialSelected, this);

        this.startTutorial = __bind(this.startTutorial, this);

        this.render = __bind(this.render, this);

        this.updateFavoriteButtons = __bind(this.updateFavoriteButtons, this);

        this.reset = __bind(this.reset, this);

        var _ref1, _ref2,
          _this = this;
        Classifier.__super__.constructor.apply(this, arguments);
        if (typeof this.template === 'string') {
          this.html(this.template);
        }
        if (typeof this.template === 'function') {
          this.html(this.template(this));
        }
        if (((_ref1 = this.workflow.tutorialSubjects) != null ? _ref1.length : void 0) > 0 && ((_ref2 = this.tutorialSteps) != null ? _ref2.length : void 0) > 0) {
          this.tutorial = new Tutorial({
            target: this.el,
            steps: this.tutorialSteps
          });
        }
        User.bind('add-favorite', function(user, favorite) {
          if (!arraysMatch(favorite.subjects, _this.workflow.selection)) {
            return;
          }
          return _this.el.addClass('is-favored');
        });
        User.bind('remove-favorite', function(user, favorite) {
          if (!arraysMatch(favorite.subjects, _this.workflow.selection)) {
            return;
          }
          return _this.el.removeClass('is-favored');
        });
        this.workflow.bind('change-selection', this.reset);
        this.workflow.bind('selection-error', this.noMoreSubjects);
        this.workflow.bind('select-tutorial', this.tutorialSelected);
        delay(function() {
          if (User.currentChecked) {
            return _this.reset();
          }
        });
        this.updateFavoriteButtons();
      }

      Classifier.prototype.reset = function() {
        var _ref1,
          _this = this;
        this.tutorial.end();
        this.el.removeClass('is-favored');
        this.updateFavoriteButtons();
        if ((_ref1 = this.classification) != null) {
          _ref1.destroy();
        }
        this.classification = new Classification({
          workflow: this.workflow,
          subjects: this.workflow.selection
        });
        this.classification.bind('change', this.render);
        return delay(function() {
          return _this.classification.trigger('change');
        });
      };

      Classifier.prototype.updateFavoriteButtons = function() {
        var signedIn, tutorial;
        signedIn = User.current != null;
        if (this.workflow.tutorialSubjects != null) {
          tutorial = arraysMatch(this.workflow.selection, this.workflow.tutorialSubjects);
        } else {
          tutorial = false;
        }
        return this.el.toggleClass('can-favorite', signedIn && !tutorial);
      };

      Classifier.prototype.render = function() {};

      Classifier.prototype.startTutorial = function(e) {
        return this.workflow.selectTutorial();
      };

      Classifier.prototype.tutorialSelected = function() {
        var _ref1;
        return (_ref1 = this.tutorial) != null ? _ref1.start() : void 0;
      };

      Classifier.prototype.saveClassification = function() {
        this.classificationsThisSession += 1;
        this.classification.persist();
        return Recent.create({
          subjects: this.workflow.selection
        });
      };

      Classifier.prototype.createFavorite = function() {
        var favorite;
        favorite = new Favorite({
          subjects: this.workflow.selection,
          projectID: this.workflow.project.id
        });
        console.log(favorite);
        return favorite.persist();
      };

      Classifier.prototype.destroyFavorite = function() {
        var fav, favorite;
        favorite = ((function() {
          var _i, _len, _ref1, _results;
          _ref1 = User.current.favorites;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            fav = _ref1[_i];
            if (arraysMatch(fav.subjects, this.workflow.selection)) {
              _results.push(fav);
            }
          }
          return _results;
        }).call(this))[0];
        return favorite.destroy(true);
      };

      Classifier.prototype.goToTalk = function() {
        if (arraysMatch(this.workflow.selection, this.workflow.tutorialSubjects)) {
          return new Dialog({
            content: 'Tutorial subjects are not available in Talk at this time.',
            className: 'classifier',
            target: this.el
          });
        } else {
          return open(this.workflow.selection[0].talkHref());
        }
      };

      Classifier.prototype.nextSubjects = function() {
        var dialog, _ref1,
          _this = this;
        if (((_ref1 = this.classificationsThisSession) === 3 || _ref1 === 9) && !User.current) {
          dialog = new Dialog({
            content: $('<div></div>').append('<p>You\'re not signed in!</p>\n<p>Sign in or create an account to receive credit for your work.</p>').html(),
            buttons: [
              {
                'Log in': true
              }, {
                'No thanks': false
              }
            ],
            target: this.el.parent(),
            className: 'classifier',
            done: function(logIn) {
              var loginForm;
              if (logIn) {
                dialog = new Dialog({
                  content: '',
                  buttons: [
                    {
                      'Cancel': null
                    }
                  ],
                  target: _this.el.parent(),
                  className: 'classifier'
                });
                loginForm = new LoginForm;
                dialog.contentContainer.append(loginForm.el);
                return dialog.reposition();
              }
            }
          });
        }
        return this.workflow.fetchSubjects().done(function() {
          return _this.workflow.selectNext();
        });
      };

      Classifier.prototype.noMoreSubjects = function() {
        return alert('We\'ve run out of subjects for you!');
      };

      return Classifier;

    })(Spine.Controller);
    return module.exports = Classifier;
  });

}).call(this);
