// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require, exports, module) {
    var $, Classification, SCOREBOARD_TEMPLATE, Scoreboard, Spine, User, config, delay;
    Spine = require('Spine');
    $ = require('jQuery');
    delay = require('zooniverse/util').delay;
    config = require('zooniverse/config');
    User = require('zooniverse/models/User');
    Classification = require('zooniverse/models/Classification');
    SCOREBOARD_TEMPLATE = require('views/Scoreboard');
    Scoreboard = (function(_super) {

      __extends(Scoreboard, _super);

      Scoreboard.prototype.forUser = false;

      Scoreboard.prototype.template = SCOREBOARD_TEMPLATE;

      Scoreboard.prototype.elements = {
        '.galaxy.score .count': 'galaxyCount',
        '.fish.score .count': 'fishCount',
        '.cluster.score .count': 'clusterCount',
        '.crustacean.score .count': 'crustaceanCount',
        '.classifications.score .count': 'classificationCount'
      };

      function Scoreboard() {
        this.render = __bind(this.render, this);

        this.update = __bind(this.update, this);
        Scoreboard.__super__.constructor.apply(this, arguments);
        this.html(this.template);
        User.bind('sign-in', this.update);
        Classification.bind('persist', this.update);
        delay(this.update);
      }

      Scoreboard.prototype.update = function() {
        var query, url,
          _this = this;
        if (this.forUser && !(User.current != null)) {
          return;
        }
        url = "http://" + config.cartoUser + ".cartodb.com/api/v2/sql?callback=?";
        query = 'SELECT ' + 'SUM(ALL(clusters)) AS clusters, ' + 'SUM(ALL(fish)) AS fish, ' + 'SUM(ALL(galaxys)) AS galaxys, ' + 'SUM(ALL(crustaceans)) AS crustaceans, ' + 'COUNT(ALL(created_at)) AS classifications ' + ("FROM " + config.cartoTable);
        if (this.forUser && (User.current != null)) {
          query += " where user_id='" + User.current.id + "'";
        }
        return $.getJSON(url, {
          q: query
        }, function(response) {
          return _this.render(response.rows[0]);
        });
      };

      Scoreboard.prototype.render = function(_arg) {
        var classifications, clusters, crustaceans, fish, galaxys;
        clusters = _arg.clusters, fish = _arg.fish, galaxys = _arg.galaxys, crustaceans = _arg.crustaceans, classifications = _arg.classifications;
        this.clusterCount.html(clusters || 0);
        this.fishCount.html(fish || 0);
        this.galaxyCount.html(galaxys || 0);
        this.crustaceanCount.html(crustaceans || 0);
        return this.classificationCount.html(classifications || 0);
      };

      return Scoreboard;

    })(Spine.Controller);
    return module.exports = Scoreboard;
  });

}).call(this);
