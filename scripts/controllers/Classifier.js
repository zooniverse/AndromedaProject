// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require, exports, module) {
    var $, Annotation, Classification, Classifier, CreaturePicker, MarkerIndicator, Pager, TEMPLATE, User, ZooniverseClassifier, arraysMatch, config, delay, remove, _ref;
    $ = require('jQuery');
    config = require('zooniverse/config');
    _ref = require('zooniverse/util'), delay = _ref.delay, remove = _ref.remove, arraysMatch = _ref.arraysMatch;
    ZooniverseClassifier = require('zooniverse/controllers/Classifier');
    Classification = require('zooniverse/models/Classification');
    Annotation = require('zooniverse/models/Annotation');
    User = require('zooniverse/models/User');
    CreaturePicker = require('controllers/CreaturePicker');
    MarkerIndicator = require('controllers/MarkerIndicator');
    Pager = require('zooniverse/controllers/Pager');
    TEMPLATE = require('views/Classifier');
    Classifier = (function(_super) {

      __extends(Classifier, _super);

      Classifier.prototype.template = TEMPLATE;

      Classifier.prototype.picker = null;

      Classifier.prototype.indicator = null;

      Classifier.prototype.events = {
        'click .species .toggles button': 'changeSpecies',
        'click .species .other-creatures button': 'showArtifacts',
        'click .species .finished': 'finishSpecies',
        'click .favorite .create button': 'createFavorite',
        'click .favorite .destroy button': 'destroyFavorite',
        'click .talk [value="yes"]': 'goToTalk',
        'click .talk [value="no"]': 'nextSubjects'
      };

      Classifier.prototype.elements = {
        '.steps': 'steps',
        '.species .toggles button': 'speciesButtons',
        '.species .other-creatures [value="yes"]': 'otherYes',
        '.species .other-creatures [value="no"]': 'otherNo',
        '.species .finished': 'speciesFinishedButton',
        '.summary .favorite .create': 'favoriteCreation',
        '.summary .favorite .destroy': 'favoriteDestruction'
      };

      function Classifier() {
        this.finishSpecies = __bind(this.finishSpecies, this);

        this.changeOther = __bind(this.changeOther, this);

        this.showArtifacts = __bind(this.showArtifacts, this);

        this.changeSpecies = __bind(this.changeSpecies, this);

        this.updateFavoriteButtons = __bind(this.updateFavoriteButtons, this);

        this.renderSpeciesPage = __bind(this.renderSpeciesPage, this);

        this.render = __bind(this.render, this);

        this.reset = __bind(this.reset, this);

        var pager, _i, _len, _ref1;
        Classifier.__super__.constructor.apply(this, arguments);
        this.indicator = new MarkerIndicator({
          el: this.el.find('.indicator'),
          classifier: this
        });
        this.picker = new CreaturePicker({
          el: this.el.find('.image'),
          classifier: this
        });
        this.picker.bind('change-selection', this.renderSpeciesPage);
        _ref1 = this.el.find('[data-page]').parent();
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          pager = _ref1[_i];
          new Pager({
            el: pager
          });
        }
        User.bind('sign-in', this.updateFavoriteButtons);
      }

      Classifier.prototype.reset = function() {
        var _this = this;
        this.picker.reset();
        Classifier.__super__.reset.apply(this, arguments);
        this.otherSpeciesAnnotation = new Annotation({
          classification: this.classification,
          value: {
            otherSpecies: null
          }
        });
        this.changeSpecies(null);
        this.speciesFinishedButton.attr('disabled');
        this.steps.removeClass('finished');
        return delay(500, function() {
          return _this.updateFavoriteButtons();
        });
      };

      Classifier.prototype.render = function() {
        return this.renderSpeciesPage();
      };

      Classifier.prototype.renderSpeciesPage = function() {
        var annotation, button, countElement, m, selectedMarker, _i, _len, _ref1;
        selectedMarker = ((function() {
          var _i, _len, _ref1, _results;
          _ref1 = this.picker.markers;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            m = _ref1[_i];
            if (m.selected) {
              _results.push(m);
            }
          }
          return _results;
        }).call(this))[0];
        if (selectedMarker) {
          this.speciesButtons.filter("[value='" + selectedMarker.annotation.value.species + "']").trigger('click');
        }
        this.speciesButtons.find('.count').html('0');
        _ref1 = this.classification.annotations;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          annotation = _ref1[_i];
          button = this.speciesButtons.filter("[value='" + annotation.value.species + "']");
          countElement = button.find('.count');
          countElement.html(parseInt(countElement.html(), 10) + 1);
        }
        if (!this.otherSpeciesAnnotation) {
          return;
        }
        if (this.otherSpeciesAnnotation.value.otherSpecies === null) {
          this.otherYes.removeClass('active');
        }
        if (this.otherSpeciesAnnotation.value.otherSpecies === null) {
          this.otherNo.removeClass('active');
        }
        this.speciesFinishedButton.attr('disabled', !(this.otherSpeciesAnnotation.value.otherSpecies != null));
        if (this.otherSpeciesAnnotation.value.otherSpecies === null) {
          return $('#artefact-list').hide();
        }
      };

      Classifier.prototype.updateFavoriteButtons = function() {
        var signedIn, tutorial;
        signedIn = User.current != null;
        tutorial = arraysMatch(this.workflow.selection, this.workflow.tutorialSubjects);
        return this.el.toggleClass('can-favorite', signedIn && !tutorial);
      };

      Classifier.prototype.changeSpecies = function(e) {
        var species, target;
        if (e == null) {
          e = {
            target: $('<input />')
          };
        }
        target = $(e.target);
        species = target.val();
        this.picker.selectedSpecies = species;
        this.picker.selectedMarkerType = target.data('marker');
        this.picker.setDisabled(!species);
        this.indicator.setSpecies(species);
        this.speciesButtons.removeClass('active');
        return target.addClass('active');
      };

      Classifier.prototype.showArtifacts = function(e) {
        var target;
        target = $(e.target);
        if (target.val() === "yes") {
          $('#artefact-list').slideDown();
        }
        if (target.val() === "no") {
          $('#artefact-list').slideUp();
        }
        if (target.val() === "yes") {
          this.otherSpeciesAnnotation.value.otherSpecies = 1;
        }
        if (target.val() === "no") {
          this.otherSpeciesAnnotation.value.otherSpecies = 0;
        }
        if (target.val() === "yes") {
          this.otherYes.addClass('active');
        }
        if (target.val() === "no") {
          this.otherNo.addClass('active');
        }
        if (target.val() === "no") {
          this.otherYes.removeClass('active');
        }
        if (target.val() === "yes") {
          this.otherNo.removeClass('active');
        }
        return this.speciesFinishedButton.removeAttr('disabled');
      };

      Classifier.prototype.changeOther = function(e) {
        var target, value;
        target = $(e.target);
        value = target.val();
        this.otherSpeciesAnnotation.value.otherSpecies = value;
        console.log("value" + this.otherSpeciesAnnotation.value.otherSpecies);
        return this.classification.trigger('change');
      };

      Classifier.prototype.finishSpecies = function() {
        this.picker.setDisabled(true);
        this.steps.addClass('finished');
        return this.saveClassification();
      };

      return Classifier;

    })(ZooniverseClassifier);
    return module.exports = Classifier;
  });

}).call(this);
