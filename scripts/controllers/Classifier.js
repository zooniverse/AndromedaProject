// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require, exports, module) {
    var $, Annotation, Classification, Classifier, CreaturePicker, MarkerIndicator, Pager, TEMPLATE, User, ZooniverseClassifier, arraysMatch, config, delay, remove, _ref;
    $ = require('jQuery');
    config = require('zooniverse/config');
    _ref = require('zooniverse/util'), delay = _ref.delay, remove = _ref.remove, arraysMatch = _ref.arraysMatch;
    ZooniverseClassifier = require('zooniverse/controllers/Classifier');
    Classification = require('zooniverse/models/Classification');
    Annotation = require('zooniverse/models/Annotation');
    User = require('zooniverse/models/User');
    CreaturePicker = require('controllers/CreaturePicker');
    MarkerIndicator = require('controllers/MarkerIndicator');
    Pager = require('zooniverse/controllers/Pager');
    TEMPLATE = require('views/Classifier');
    Classifier = (function(_super) {

      __extends(Classifier, _super);

      Classifier.prototype.template = TEMPLATE;

      Classifier.prototype.picker = null;

      Classifier.prototype.indicator = null;

      Classifier.prototype.feedback = ["PHAT Catch!", "Wicked!", "Nice!", "Congratulations!"];

      Classifier.prototype.events = {
        'click .species .toggles button': 'changeSpecies',
        'click .species .other-creatures button': 'showArtifacts',
        'click .species .finished': 'finishSpecies',
        'click .favorite .create button': 'createFavorite',
        'click .favorite .destroy button': 'destroyFavorite',
        'click .talk [value="yes"]': 'goToTalk',
        'click .talk [value="no"]': 'nextSubjects',
        'click .favorite [value="no"]': 'nextSubjects',
        'click .tutorial-again': 'startTutorial',
        'click .feedback': 'showLabels',
        'click .toggle-subject': 'toggleSubject',
        'click .reset-subject': 'resetClassification'
      };

      Classifier.prototype.elements = {
        '.steps': 'steps',
        '.species .toggles button': 'speciesButtons',
        '.species .other-creatures [value="yes"]': 'otherYes',
        '.species .other-creatures [value="no"]': 'otherNo',
        '.species .finished': 'speciesFinishedButton',
        '.summary': 'summary',
        '.overlay': 'overlay',
        '.summary .favorite .create': 'favoriteCreation',
        '.summary .favorite .destroy': 'favoriteDestruction'
      };

      function Classifier() {
        this.finishSpecies = __bind(this.finishSpecies, this);

        this.toggleSubject = __bind(this.toggleSubject, this);

        this.showLabels = __bind(this.showLabels, this);

        this.changeOther = __bind(this.changeOther, this);

        this.showArtifacts = __bind(this.showArtifacts, this);

        this.changeSpecies = __bind(this.changeSpecies, this);

        this.updateFavoriteButtons = __bind(this.updateFavoriteButtons, this);

        this.renderSpeciesPage = __bind(this.renderSpeciesPage, this);

        this.render = __bind(this.render, this);

        this.resetClassification = __bind(this.resetClassification, this);

        this.reset = __bind(this.reset, this);

        this.enableFinished = __bind(this.enableFinished, this);

        this.disableFinished = __bind(this.disableFinished, this);

        var pager, _i, _len, _ref1;
        Classifier.__super__.constructor.apply(this, arguments);
        this.indicator = new MarkerIndicator({
          el: this.el.find('.indicator'),
          classifier: this
        });
        this.picker = new CreaturePicker({
          el: this.el.find('.image'),
          classifier: this
        });
        this.picker.bind('change-selection', this.renderSpeciesPage);
        _ref1 = this.el.find('[data-page]').parent();
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          pager = _ref1[_i];
          new Pager({
            el: pager
          });
        }
        User.bind('sign-in', this.updateFavoriteButtons);
        this.picker.el.bind('create-half-axes-marker', this.disableFinished);
        this.picker.el.bind('create-axes-marker', this.enableFinished);
      }

      Classifier.prototype.disableFinished = function() {
        return $('button[class="finished"]').attr('disabled', 'disabled');
      };

      Classifier.prototype.enableFinished = function() {
        return $('button[class="finished"]').removeAttr('disabled');
      };

      Classifier.prototype.reset = function() {
        var _this = this;
        this.picker.reset();
        Classifier.__super__.reset.apply(this, arguments);
        this.otherSpeciesAnnotation = new Annotation({
          classification: this.classification
        });
        this.changeSpecies(null);
        this.steps.removeClass('finished');
        return delay(500, function() {
          return _this.updateFavoriteButtons();
        });
      };

      Classifier.prototype.resetClassification = function(e) {
        e.preventDefault();
        return this.reset();
      };

      Classifier.prototype.render = function() {
        var active, item, _i, _len, _ref1;
        this.renderSpeciesPage();
        active = false;
        _ref1 = $('button[data-marker]');
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          item = _ref1[_i];
          if ($(item).hasClass('active')) {
            active = true;
            break;
          }
        }
        if (!active) {
          return $('button[value="cluster"]').click();
        }
      };

      Classifier.prototype.renderSpeciesPage = function() {
        var annotation, button, countElement, m, selectedMarker, _i, _len, _ref1;
        selectedMarker = ((function() {
          var _i, _len, _ref1, _results;
          _ref1 = this.picker.markers;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            m = _ref1[_i];
            if (m.selected) {
              _results.push(m);
            }
          }
          return _results;
        }).call(this))[0];
        if (selectedMarker) {
          this.speciesButtons.filter("[value='" + selectedMarker.annotation.value.species + "']").trigger('click');
        }
        this.speciesButtons.find('.count').html('0');
        _ref1 = this.classification.annotations;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          annotation = _ref1[_i];
          button = this.speciesButtons.filter("[value='" + annotation.value.species + "']");
          countElement = button.find('.count');
          countElement.html(parseInt(countElement.html(), 10) + 1);
        }
        if (!this.otherSpeciesAnnotation) {

        }
      };

      Classifier.prototype.updateFavoriteButtons = function() {
        var signedIn, tutorial;
        signedIn = User.current != null;
        tutorial = arraysMatch(this.workflow.selection, this.workflow.tutorialSubjects);
        return this.el.toggleClass('can-favorite', signedIn && !tutorial);
      };

      Classifier.prototype.changeSpecies = function(e) {
        var species, target;
        if (e == null) {
          e = {
            target: $('<input />')
          };
        }
        target = $(e.target);
        species = target.val();
        this.picker.selectedSpecies = species;
        this.picker.selectedMarkerType = target.data('marker');
        this.picker.setDisabled(!species);
        this.indicator.setSpecies(species);
        this.speciesButtons.removeClass('active');
        return target.addClass('active');
      };

      Classifier.prototype.showArtifacts = function(e) {
        var target;
        target = $(e.target);
        if (target.val() === "yes") {
          $('#artefact-list').slideDown();
        }
        if (target.val() === "no") {
          $('#artefact-list').slideUp();
        }
        if (target.val() === "yes") {
          this.otherSpeciesAnnotation.value.otherSpecies = 1;
        }
        if (target.val() === "no") {
          this.otherSpeciesAnnotation.value.otherSpecies = 0;
        }
        if (target.val() === "yes") {
          this.otherYes.addClass('active');
        }
        if (target.val() === "no") {
          this.otherNo.addClass('active');
        }
        if (target.val() === "no") {
          this.otherYes.removeClass('active');
        }
        if (target.val() === "yes") {
          this.otherNo.removeClass('active');
        }
        return this.speciesFinishedButton.removeAttr('disabled');
      };

      Classifier.prototype.changeOther = function(e) {
        var target, value;
        target = $(e.target);
        value = target.val();
        this.otherSpeciesAnnotation.value.otherSpecies = value;
        return this.classification.trigger('change');
      };

      Classifier.prototype.showLabels = function() {
        var m, _i, _len, _ref1, _results;
        _ref1 = this.picker.markers;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          m = _ref1[_i];
          m.label.show();
          _results.push(m.label.animate({
            opacity: 1
          }, 100));
        }
        return _results;
      };

      Classifier.prototype.toggleSubject = function(e) {
        var img, src;
        e.preventDefault();
        img = jQuery('.selection-area img');
        src = img.attr('src');
        src = src.replace('standard', 'F475W');
        return img.attr('src', src);
      };

      Classifier.prototype.finishSpecies = function() {
        var annotation, center, centerPoint, context, distance, pixradius, points, radius, subject, synthetic, synthetics, words, x, x1, x2, y, y1, y2, _i, _j, _len, _len1, _ref1;
        this.picker.setDisabled(true);
        this.steps.addClass('finished');
        subject = this.picker.classifier.workflow.selection[0];
        center = subject.metadata.center;
        if (center != null) {
          x = parseFloat(center.x);
          y = 282 - parseFloat(center.y);
          radius = 4;
          context = this.overlay[0].getContext('2d');
          context.clearRect(0, 0, 245, 282);
          context.beginPath();
          context.arc(x, y, radius, 0, 2 * Math.PI, false);
          context.fillStyle = "#F1F1F1";
          context.lineWidth = 1;
          context.strokeStyle = "#505050";
          context.stroke();
          context.fill();
        }
        synthetics = subject.metadata.synthetic;
        if (synthetics) {
          if (this.classification.hasOwnProperty('annotations')) {
            _ref1 = this.classification.annotations;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              annotation = _ref1[_i];
              if (annotation.hasOwnProperty('value')) {
                if (annotation.value.hasOwnProperty('species')) {
                  if (annotation.value.species === 'cluster') {
                    points = annotation.value.points;
                    centerPoint = points[0];
                    x1 = 725 * centerPoint.x;
                    y1 = 500 * centerPoint.y;
                    for (_j = 0, _len1 = synthetics.length; _j < _len1; _j++) {
                      synthetic = synthetics[_j];
                      x2 = parseFloat(synthetic.x);
                      y2 = 500 - parseFloat(synthetic.y);
                      distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
                      console.log("distance = ", distance);
                      if (distance < 20) {
                        pixradius = parseFloat(synthetic.pixradius);
                        this.picker.paper.circle(x2, y2, pixradius).attr({
                          stroke: '#CD3E20',
                          'stroke-width': 4
                        });
                        words = this.feedback[Math.floor(Math.random() * this.feedback.length)];
                        this.picker.paper.text(x2, y2 - 20, "" + words + "\nYou found a synthetic cluster!").attr("fill", "#F1F1F1").attr("font-size", "12px");
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return this.saveClassification();
      };

      return Classifier;

    })(ZooniverseClassifier);
    return module.exports = Classifier;
  });

}).call(this);
