// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(function(require, exports, module) {
    var $, Annotation, Classification, Classifier, CreaturePicker, MarkerIndicator, Pager, TEMPLATE, User, ZooniverseClassifier, arraysMatch, config, delay, remove, _ref;
    $ = require('jQuery');
    config = require('zooniverse/config');
    _ref = require('zooniverse/util'), delay = _ref.delay, remove = _ref.remove, arraysMatch = _ref.arraysMatch;
    ZooniverseClassifier = require('zooniverse/controllers/Classifier');
    Classification = require('zooniverse/models/Classification');
    Annotation = require('zooniverse/models/Annotation');
    User = require('zooniverse/models/User');
    CreaturePicker = require('controllers/CreaturePicker');
    MarkerIndicator = require('controllers/MarkerIndicator');
    Pager = require('zooniverse/controllers/Pager');
    TEMPLATE = require('views/Classifier');
    Classifier = (function(_super) {

      __extends(Classifier, _super);

      Classifier.prototype.template = TEMPLATE;

      Classifier.prototype.picker = null;

      Classifier.prototype.indicator = null;

      Classifier.prototype.groundCoverAnnotation = null;

      Classifier.prototype.availableGroundCovers = [
        {
          sand: 'Sand'
        }, {
          shell: 'Shell'
        }, {
          gravel: 'Gravel'
        }, {
          cobble: 'Cobble'
        }, {
          boulder: 'Boulder'
        }, {
          cantTell: 'Can\'t tell'
        }
      ];

      Classifier.prototype.events = {
        'click .ground-cover .toggles button': 'toggleGroundCover',
        'click .ground-cover .finished': 'finishGroundCover',
        'click .species .toggles button': 'changeSpecies',
        'click .species .other-creatures button': 'changeOther',
        'click .species .finished': 'finishSpecies',
        'click .favorite .create button': 'createFavorite',
        'click .favorite .destroy button': 'destroyFavorite',
        'click .map-toggle img': 'toggleMap',
        'click .talk [value="yes"]': 'goToTalk',
        'click .talk [value="no"]': 'nextSubjects',
        'click .tutorial-again': 'startTutorial'
      };

      Classifier.prototype.elements = {
        '.steps': 'steps',
        '.ground-cover .toggles': 'groundCoverList',
        '.ground-cover .finished': 'groundCoverFinishedButton',
        '.species .toggles button': 'speciesButtons',
        '.species .other-creatures [value="yes"]': 'otherYes',
        '.species .other-creatures [value="no"]': 'otherNo',
        '.species .finished': 'speciesFinishedButton',
        '.summary .favorite .create': 'favoriteCreation',
        '.summary .favorite .destroy': 'favoriteDestruction',
        '.summary .map-toggle .thumbnail img': 'imageThumbnail',
        '.summary .map-toggle .map img': 'mapThumbnail'
      };

      function Classifier() {
        this.toggleMap = __bind(this.toggleMap, this);

        this.finishSpecies = __bind(this.finishSpecies, this);

        this.changeOther = __bind(this.changeOther, this);

        this.changeSpecies = __bind(this.changeSpecies, this);

        this.finishGroundCover = __bind(this.finishGroundCover, this);

        this.toggleGroundCover = __bind(this.toggleGroundCover, this);

        this.updateFavoriteButtons = __bind(this.updateFavoriteButtons, this);

        this.renderSpeciesPage = __bind(this.renderSpeciesPage, this);

        this.renderGroundCoverPage = __bind(this.renderGroundCoverPage, this);

        this.render = __bind(this.render, this);

        this.reset = __bind(this.reset, this);

        var description, id, map, pager, _i, _j, _len, _len1, _ref1, _ref2;
        Classifier.__super__.constructor.apply(this, arguments);
        this.indicator = new MarkerIndicator({
          el: this.el.find('.indicator'),
          classifier: this
        });
        this.picker = new CreaturePicker({
          el: this.el.find('.image'),
          classifier: this
        });
        this.picker.bind('change-selection', this.renderSpeciesPage);
        _ref1 = this.el.find('[data-page]').parent();
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          pager = _ref1[_i];
          new Pager({
            el: pager
          });
        }
        _ref2 = this.availableGroundCovers;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          map = _ref2[_j];
          for (id in map) {
            description = map[id];
            this.groundCoverList.append("<li><button value=\"" + id + "\">" + description + "</button></li>");
          }
        }
        User.bind('sign-in', this.updateFavoriteButtons);
      }

      Classifier.prototype.reset = function() {
        var _this = this;
        this.picker.reset();
        Classifier.__super__.reset.apply(this, arguments);
        this.groundCoverAnnotation = new Annotation({
          classification: this.classification,
          value: {
            groundCovers: []
          }
        });
        this.otherSpeciesAnnotation = new Annotation({
          classification: this.classification,
          value: {
            otherSpecies: null
          }
        });
        if (~location.hash.indexOf('/classify')) {
          location.hash = '#!/classify/ground-cover';
        }
        this.changeSpecies(null);
        this.steps.removeClass('finished');
        return delay(500, function() {
          _this.imageThumbnail.attr('src', _this.workflow.selection[0].location.thumbnail);
          _this.mapThumbnail.attr('src', ("http://maps.googleapis.com/maps/api/staticmap\n?center=" + _this.workflow.selection[0].coords[0] + "," + _this.workflow.selection[0].coords[1] + "\n&zoom=10&size=745x570&maptype=satellite&sensor=false").replace(/\n/g, ''));
          _this.updateFavoriteButtons();
          _this.el.toggleClass('show-map', false);
          _this.el.find('.summary .latitude .value').html(_this.classification.subjects[0].coords[0]);
          _this.el.find('.summary .longitude .value').html(_this.classification.subjects[0].coords[1]);
          _this.el.find('.summary .depth .value').html(_this.classification.subjects[0].metadata.depth);
          _this.el.find('.summary .altitude .value').html(_this.classification.subjects[0].metadata.altitude);
          _this.el.find('.summary .heading .value').html(_this.classification.subjects[0].metadata.heading);
          _this.el.find('.summary .salinity .value').html(_this.classification.subjects[0].metadata.salinity);
          _this.el.find('.summary .temperature .value').html(_this.classification.subjects[0].metadata.temperature);
          return _this.el.find('.summary .speed .value').html(_this.classification.subjects[0].metadata.speed);
        });
      };

      Classifier.prototype.render = function() {
        this.renderGroundCoverPage();
        return this.renderSpeciesPage();
      };

      Classifier.prototype.renderGroundCoverPage = function() {
        var button, groundCoverActive, groundCoverPicked, _i, _len, _ref1, _ref2;
        if (!this.groundCoverAnnotation) {
          return;
        }
        _ref1 = this.groundCoverList.find('button');
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          button = _ref1[_i];
          button = $(button);
          groundCoverActive = (_ref2 = button.attr('value'), __indexOf.call(this.groundCoverAnnotation.value.groundCovers, _ref2) >= 0);
          button.toggleClass('active', groundCoverActive);
        }
        groundCoverPicked = this.groundCoverAnnotation.value.groundCovers.length !== 0;
        return this.groundCoverFinishedButton.attr('disabled', !groundCoverPicked);
      };

      Classifier.prototype.renderSpeciesPage = function() {
        var annotation, button, countElement, m, selectedMarker, _i, _len, _ref1;
        selectedMarker = ((function() {
          var _i, _len, _ref1, _results;
          _ref1 = this.picker.markers;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            m = _ref1[_i];
            if (m.selected) {
              _results.push(m);
            }
          }
          return _results;
        }).call(this))[0];
        if (selectedMarker) {
          this.speciesButtons.filter("[value='" + selectedMarker.annotation.value.species + "']").trigger('click');
        }
        this.speciesButtons.find('.count').html('0');
        _ref1 = this.classification.annotations;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          annotation = _ref1[_i];
          button = this.speciesButtons.filter("[value='" + annotation.value.species + "']");
          countElement = button.find('.count');
          countElement.html(parseInt(countElement.html(), 10) + 1);
        }
        if (!this.otherSpeciesAnnotation) {
          return;
        }
        this.otherYes.toggleClass('active', this.otherSpeciesAnnotation.value.otherSpecies === true);
        this.otherNo.toggleClass('active', this.otherSpeciesAnnotation.value.otherSpecies === false);
        return this.speciesFinishedButton.attr('disabled', !(this.otherSpeciesAnnotation.value.otherSpecies != null));
      };

      Classifier.prototype.updateFavoriteButtons = function() {
        var signedIn, tutorial;
        signedIn = User.current != null;
        tutorial = arraysMatch(this.workflow.selection, this.workflow.tutorialSubjects);
        return this.el.toggleClass('can-favorite', signedIn && !tutorial);
      };

      Classifier.prototype.toggleGroundCover = function(e) {
        var value;
        value = $(e.target).val();
        if (__indexOf.call(this.groundCoverAnnotation.value.groundCovers, value) >= 0) {
          remove(value, {
            from: this.groundCoverAnnotation.value.groundCovers
          });
        } else {
          this.groundCoverAnnotation.value.groundCovers.push(value);
        }
        return this.classification.trigger('change');
      };

      Classifier.prototype.finishGroundCover = function() {
        return location.hash = '#!/classify/species';
      };

      Classifier.prototype.changeSpecies = function(e) {
        var species, target;
        if (e == null) {
          e = {
            target: $('<input />')
          };
        }
        target = $(e.target);
        species = target.val();
        this.picker.selectedSpecies = species;
        this.picker.selectedMarkerType = target.data('marker');
        this.picker.setDisabled(!species);
        this.indicator.setSpecies(species);
        this.speciesButtons.removeClass('active');
        return target.addClass('active');
      };

      Classifier.prototype.changeOther = function(e) {
        var target, value;
        target = $(e.target);
        value = target.val() === 'yes';
        this.otherSpeciesAnnotation.value.otherSpecies = value;
        return this.classification.trigger('change');
      };

      Classifier.prototype.finishSpecies = function() {
        this.picker.setDisabled(true);
        this.steps.addClass('finished');
        return this.saveClassification();
      };

      Classifier.prototype.toggleMap = function(show) {
        if (typeof show !== 'boolean') {
          show = (function() {
            return arguments[0];
          })();
        }
        return this.el.toggleClass('show-map', show);
      };

      return Classifier;

    })(ZooniverseClassifier);
    return module.exports = Classifier;
  });

}).call(this);
