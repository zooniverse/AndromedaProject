// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  define(function(require, exports, module) {
    var $, ImageFlipper, modulus;
    $ = require('jQuery');
    modulus = function(a, b) {
      return ((a % b) + b) % b;
    };
    ImageFlipper = (function() {

      ImageFlipper.prototype.el = null;

      ImageFlipper.prototype.className = 'image-flipper';

      ImageFlipper.prototype.images = null;

      ImageFlipper.prototype.current = 0;

      ImageFlipper.prototype.beforeClass = 'before';

      ImageFlipper.prototype.activeClass = 'active';

      ImageFlipper.prototype.afterClass = 'after';

      function ImageFlipper(params) {
        var property, value, _ref, _ref1;
        if (params == null) {
          params = {};
        }
        this.next = __bind(this.next, this);

        this.prev = __bind(this.prev, this);

        for (property in params) {
          if (!__hasProp.call(params, property)) continue;
          value = params[property];
          this[property] = value;
        }
        if ((_ref = this.el) == null) {
          this.el = $("<div class='" + this.constructor.prototype.className + "'></div>");
        }
        this.el = $(this.el);
        this.el.addClass(this.className);
        if ((_ref1 = this.images) == null) {
          this.images = this.el.children('img, figure');
        }
        this.el.append("<div class=\"flipper-controls\">\n  <button name=\"prev\"><span class=\"icon\">&#9668;</span><span class=\"label\">Previous</span></button>\n  <button name=\"next\"><span class=\"label\">Next</span><span class=\"icon\">&#9658;</span></button>\n</div>");
        this.el.on('click', 'button[name="prev"]', this.prev);
        this.el.on('click', 'button[name="next"]', this.next);
        this.setActive();
      }

      ImageFlipper.prototype.setActive = function(current) {
        var i, image, _i, _len, _ref, _results;
        this.current = current != null ? current : this.current;
        this.current = parseInt(this.current, 10);
        _ref = this.images;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          image = _ref[i];
          image = $(image);
          image.toggleClass(this.beforeClass, i < this.current);
          image.toggleClass(this.activeClass, i === this.current);
          _results.push(image.toggleClass(this.afterClass, i > this.current));
        }
        return _results;
      };

      ImageFlipper.prototype.prev = function() {
        return this.setActive(modulus(this.current - 1, this.images.length));
      };

      ImageFlipper.prototype.next = function() {
        return this.setActive(modulus(this.current + 1, this.images.length));
      };

      return ImageFlipper;

    })();
    return module.exports = ImageFlipper;
  });

}).call(this);
